name: CI
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  light-checks:
    name: Light checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Clippy
        run: |
          rustup update --no-self-update nightly
          rustup +nightly component add clippy
          # Specifically, don't enable `async` feature in winter-prover crate
          cargo +nightly clippy --workspace --all-targets --features std,concurrent -- -D clippy::all -D warnings

      - name: Rustfmt
        run: |
          rustup +nightly component add rustfmt
          cargo +nightly fmt --all --check

  # Note: the examples won't compile when the prover is built with the `async` feature, since they're designed to be sync only.
  # Hence, we avoid this scenario explicitly.
  check:
    name: Check all features and all targets against the MSRV, except for winter-prover and winterfell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Perform checks
        run: |
          rustup update --no-self-update stable
          cargo +stable install cargo-hack --locked
          RUSTFLAGS=-Dwarnings cargo +stable hack --no-private --feature-powerset --keep-going check --rust-version --verbose --all-targets --workspace --exclude winter-prover --exclude winterfell

  # Check prover and winterfell alone; specifically, that the `async` feature builds correctly 
  check-prover:
    name: Check prover and winterfell packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Perform check
        run: |
          rustup update --no-self-update stable
          cargo +stable install cargo-hack --locked
          RUSTFLAGS=-Dwarnings cargo +stable hack --package winter-prover --package winterfell --no-private --feature-powerset --keep-going check --rust-version --verbose

  test:
    name: Test Rust ${{matrix.toolchain}} on ${{matrix.os}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@main
      - name: Run test
        run: |
          rustup update --no-self-update ${{ matrix.toolchain }}
          cargo +${{ matrix.toolchain }} test

  no-std:
    name: Build for no-std
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@main
      - name: Build for no-std
        run: |
          rustup update --no-self-update ${{ matrix.toolchain }}
          rustup +${{ matrix.toolchain }} target add wasm32-unknown-unknown
          cargo +${{ matrix.toolchain }} build --verbose --no-default-features --target wasm32-unknown-unknown
